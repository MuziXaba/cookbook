==============
What is Docker?
==============
Containerisation software
Container - An isolated environment for running applications
Unlike Virtual Machines, containers share the host OS

# Docker architecture
Uses Client - Server architecture

# Docker Keywords
Image - Package/Template used to create containers.
Container - Running instance of an image
Dockerfile - 
Kernel -


============
Requirements
============
If Windows:
	Have Windows 10
	Enable Hyper-V
	Enable virtualisation


====================================
Download & Install Docker (WINDOWS)
====================================
https://hub.docker.com/editions/community/docker-ce-desktop-windows/
Approximately 550mb

===========================
Download & Install (Linux)
===========================

# Check version (CLI)
docker version

# List docker images on local Machine
docker image ls


What's in the box:
	Docker Engine (CLI > API > Deamon)
	Docker Compose
	Docker Machine
	Kitematic


============
Using Docker
============
Create or pull Docker image from registries.
Popular registries are DockerHub and Quay.io
Containers will run as long there's a process running
# Dockerising/Containerising an app
1. Add Dockerfile to app
2. Create a docker image

# Run a docker image (attached)
docker run image <image_name>

# Run docker container in background (detached)
docker run -d <container_name>

# Attach to a container running in the background
docker attach <first_5_letters_of_container_ID>

# Get a docker image from docker hub
docker pull <image_name>

# List running containers
docker ps

# List all containers
docker ps -a

# Stop a container
docker stop <container_name>

# stop all containers
docker kill $(docker ps -q)

# stop and remove all containers
docker rm $(docker ps -a -q)

# Run image in interactive mode
docker run -it <image_name>

# run command on a running container
docker exec <container_name> [command]

# limit the amount of cpu/ram a container can use (cgroups)
docker run --cpus=0.5 ubuntu
docker run --memory=100m ubuntu

=============
Docker Swarms
=============
A group of Docker engines working together.
They're managed by Docker Manager

==============
Docker Compose
==============
Runs multiple apps made up of multiple containers

==============
Docker on Linux
==============

# install
sudo snap install Docker

# check version
docker --version
docker version

# create docker group (avoid typing sudo for all commands)
sudo groupadd docker (creates docker group)
sudo usermod -aG docker $USER

# Get docker image from docker hub
docker pull <image_name>

# list docker images
docker images
docker image ls

# remove image
docker rmi <image_name>

# list docker containers
docker container ls (--all, -aq)

# see all running containers
docker ps -a

# build docker image
docker build -t <image_name> <path/to/Dockerfile>

# get image from DockerHub
docker pull <image_name>

# run a container in interactive mode
docker run it --name=ContainerName

# run a container, use a PORT (Port Mapping)
docker run -p 8080:80 <image> (maps port 8080 from local machine with port 80 inside container)

# add a command onto the 'run' command
docker run ubuntu cat /etc/*release* -> Checks OS version

# Stop a container
docker stop container_name

# See container logs
docker logs <container_name>

# Inspect a Container (Finds details about a container)
docker inspect <container_name>

# remove all stopped containers
docker rm $(docker ps -a -q)

# remove/delete a container (must be stopped first)
docker rm <container_name>

# view docker setup
docker info

# run an image
sudo docker run image_name

# run a container and pass environment variables
docker run -e ENV_VAR=value <image>

# run a container and link it to another
docker run -d --name=frontend -p 5000:80 --link postgres:pg_image_name frontend_image

# run a container on a remote host
docker -H=<remote-host-ip>:<port> run <image>

# build a docker image
sudo docker build --tag=TagName . (remember the dot at the end)

# copy file from local INTO docker container
docker cp /home/muzi/Music/test.mp3 ContainerID:/root/music/test.mp3

# copy  FROM docker container into local
docker cp ContainerID:/root/my_dir/file.txt file.txt

# Disabling Hyper-V, to use a VM (admin)
bcedit /set hypervisorlaunchtype off

# Enable Hyper-V to use Docker (admin)
bcedit /set hypervisorlaunchtype auto


# Get the base Operating System used by an image
docker run <image> cat /etc/*release*

# Write the django runserver command inside a Dockerfile
CMD ["python3", "manage.py", "runserver"]

# Create a volume
docker volume create <volume_name>

# Mount volume onto container
docker run -v <volume_name>:/path/to/something <image>

# Mount using 'mount' flag (source=localhost, target=container)
docker run --mount type=bind, \
source=/data/mysql, \
target=/var/lib/mysql \
mysql

# log into DockerHub
docker login


===================
DOCKER FILE System
===================
/var/lib/docker
- aufs
- containers
- image
- volumes


==================
DOCKERFILE Anatomy
==================
FROM node:12.16.3 (base image, required)

WORKDIR /code (directory where docker files will be stored)

ENV PORT 80

COPY package.json /docker_dir/package.json (copy  the apps package file into docker)

RUN npm install (install packages found inside package.json)

COPY . /code (copy all file in working dir into docker dir)

CMD [ "node", "srs/server.js"] (default command to run when image is started)



===================
CREATE DOCKER IMAGE
===================

# Dockerfile
--------------
# Start with base image (required)
FROM ubuntu

# Add all commands you would type on that base image to get the app to run
# Add linux packages you need
RUN sudo apt-get update
RUN sudo apt-get install -y python3
RUN sudo apt-get install -y python-pip3

# Add app dependencies
RUN pip3 install flask

# Copy app files into the container
COPY app.py /opt/app.py

# Determine app entrypoint
ENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0:5000


# Build Image
---------------
docker build . -t <my_image_tag>

# List all networks
docker network ls

# Inspect/check a networks configuration
docker network inspect bridge

# Create a network using the bridge driver
docker network create \
--driver bridge \
--subnet 182.18.1/24 \
--gateway 182.18.0.1 \
<new-network-name>

===================
PRIVATE REGISTRIES
===================
# Login to private registry
docker login example.io

# Run container from inside a private registry
docker run example.io/app/internal-app


======================
LOCAL REGISTRY
======================
# Create image
docker image tag <image-name> localhost:5000/<image-name>

# Push/Pull image to/from localhost
docker push localhost:5000/<image-name>



====================
DOCKERFILE COMMANDS
====================
FROM - base image
WORKDIR - sets the app directory
ADD - copies/extracts files from local/url into the container (ADD <src> <dest>)
COPY - copies files from local into the container (COPY <src> <dest>)
RUN - runs a bash command
EXPOSE - makes a certain port available for links/publish
CMD - command that runs when the container launches
ENTRYPOINT - 
ENV - 


# Challenges when working with containers
------------------------------------------
Bin Packing: Run out of space for apps inside your containers
Zombie Containers: No longer needed but refuse to stop
Disappearing Containers: Containers that stop unexpectedly


==============
DOCKER COMPOSE
==============
# Use to combine different containers that make up a stack for an app.
# Runs on a single Docker host
# Configured using YAML

# Run a docker-compose file in detached mode
docker-compose up -d

# Example of stack without using Docker Compose (Voting App)
docker run -d --name=redisdb redis
docker run -d --name=db postgres:9.4
docker run -d --name=vote -p 5000:80 --link redis:redisdb voting-app
docker run -d --name=result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link db:db --link redis:redis worker


# docker-compose.yml (V1)
redis:
	image: redis
db:
	image:postgres:9.4
vote:
	build: ./vote #image 2b built locally
	ports:
		- 5000:80
	links:
		- redis
result:
	image: result-app
	ports:
		- 5001:80
	links:
		- db
worker:
	image: worker


# docker-compose.yml (V2)
version: 2
services:
	redis:
		image: redis
	db:
		image:postgres:9.4
		networks:
			- back-end
	vote:
		build: ./vote #image 2b built locally
		ports:
			- 5000:80
		depends_on:
			- redis
		networks:
			- front-end
			- back-end
	result:
		image: result-app
		ports:
			- 5001:80
		links:
			- db
		networks:
			- front-end
			- back-end
	worker:
		image: worker
		networks:
			- back-end

networks:
	front-end:
	back-end:



================
Docker Networking
===============
# Bridge
Default network containers get connected to.
It's private

# Creating a Bridge network
docker network create \
--driver bridge \
--subnet id-address/mask \
<custom-isolated-network-name>

# none
Containers are linked to any network
They're all private

# Host


======================
CONTAINER ORCHESTRATION
========================
# Solution(s) that help to host containers in prod environment.

Options
-------
1. Docker Swarm
- Can put multiple docker hosts under one Swarm.
- One host must be the Swarm Manager, the others are workers.
# Creating a swarm Manager
docker swarm init
# Creating a worker node
docker swarm join --token <token>
# Create instances of containers in a swarm (inside swarm manager)
docker service create --replicas=10 <image>

2. Kubernetes
Cluster - Set a nodes that are grouped together
CLI - kubectl
4. Mesos