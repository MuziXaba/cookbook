===========
What is Docker?
===========
Containerisation software
Container - An isolated environment for running applications
Unlike Virtual Machines, containers share the host OS

# Docker architecture
Uses Client - Server architecture

# Docker Keywords
Image - Package/Template used to create containers.
Container - Running instance of an image
Dockerfile - 
Kernel -


=========
Requirements
=========
If Windows:
	Have Windows 10
	Enable Hyper-V
	Enable virtualisation


=================
Download & Install Docker (WINDOWS)
=================
https://hub.docker.com/editions/community/docker-ce-desktop-windows/
Approximately 550mb

===========================
Download & Install (Linux)
===========================

# Check version (CLI)
docker version

# List docker images on local Machine
docker image ls


What's in the box:
	Docker Engine
	Docker Compose
	Docker Machine
	Kitematic


=========
Using Docker
=========
Create or pull Docker image from registries.
Popular registries are DockerHub and Quay.io
Containers will run as long there's a process running
# Dockerising/Containerising an app
1. Add Dockerfile to app
2. Create a docker image

# Run a docker image (attached)
docker run image <image_name>

# Run docker container in background (detached)
docker run -d <container_name>

# Attach to a container running in the background
docker attach <first_5_letters_of_container_ID>

# Get a docker image from docker hub
docker pull <image_name>

# List running containers
docker ps

# List all containers
docker ps -a

# Stop a container
docker stop <container_name>

# stop all containers
docker kill $(docker ps -q)

# stop and remove all containers
docker rm $(docker ps -a -q)

# Run image in interactive mode
docker run -it <image_name>

# run command on a running container
docker exec <container_name> [command]

==========
Docker Swarms
==========
A group of Docker engines working together.
They're managed by Docker Manager

===========
Docker Compose
===========
Runs multiple apps made up of multiple containers

===========
Docker on Linux
===========

# install
sudo snap install Docker

# check version
docker --version
docker version

# create docker group (avoid typing sudo for all commands)
sudo groupadd docker (creates docker group)
sudo usermod -aG docker $USER

# Get docker image from docker hub
docker pull <image_name>

# list docker images
docker images
docker image ls

# remove image
docker rmi <image_name>

# list docker containers
docker container ls (--all, -aq)

# see all running containers
docker ps -a

# build docker image
docker build -t <image_name> <path/to/Dockerfile>

# get image from DockerHub
docker pull <image_name>

# run a container in interactive mode
docker run it --name=ContainerName

# run a container, use a PORT (Port Mapping)
<<<<<<< HEAD
docker run -p 8080:80 <image> (maps port 8080 from local machine with port 80 inside container)
=======
docker run -p 8080:80 <image_name> (maps port 8080 from local machine with port 80 inside container)

# add a command onto the 'run' command
docker run ubuntu cat /etc/*release* -> Checks OS version
>>>>>>> 4da0f8fdbe2950febf85def9eb84ccf6c4b4a3d9

# Stop a container
docker stop container_name

# See container logs
docker logs <container_name>

# Inspect a Container (Finds details about a container)
docker inspect <container_name>

# remove all stopped containers
docker rm $(docker ps -a -q)

# view docker setup
docker info

# run an image
sudo docker run image_name

# run a container and pass environment variables
docker run -e ENV_VAR=value <image>

# build a docker image
sudo docker build --tag=TagName . (remember the dot at the end)

# copy file from local INTO docker container
docker cp /home/muzi/Music/test.mp3 ContainerID:/root/music/test.mp3

# copy  FROM docker container into local
docker cp ContainerID:/root/my_dir/file.txt file.txt

# Disabling Hyper-V, to use a VM (admin)
bcedit /set hypervisorlaunchtype off

# Enable Hyper-V to use Docker (admin)
bcedit /set hypervisorlaunchtype auto


# Get the base Operating System used by an image
docker run <image> cat /etc/*release*

# Write the django runserver command inside a Dockerfile
CMD ["python3", "manage.py", "runserver"]

# log into DockerHub
docker login


===============
DOCKERFILE Anatomy
===============
FROM node:12.16.3 (base image, required)

WORKDIR /code (directory where docker files will be stored)

ENV PORT 80

COPY package.json /docker_dir/package.json (copy  the apps package file into docker)

RUN npm install (install packages found inside package.json)

COPY . /code (copy all file in working dir into docker dir)

CMD [ "node", "srs/server.js"] (default command to run when image is started)



================
CREATE DOCKER IMAGE
================

# Dockerfile
--------------
# Start with base image (required)
FROM ubuntu

# Add all commands you would type on that base image to get the app to run
RUN sudo apt-get update
RUN sudo apt-get install -y python3
RUN sudo apt-get install -y python-pip3
RUN pip3 install flask

# Copy files
COPY app.py /opt/app.py

# Determine app entrypoint
ENTRTPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0:5000


# Build Image
---------------
docker build . -t <my_image_tag>