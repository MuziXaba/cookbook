#===========
# Background
#===========

- Git is a version control system
- Developed by Linus Trovalds to help with the development of Linux

A git repo contains the following:
    - Files managed by git
    - History of everything since tracking with git
    - hidden .git folder


#===========
# Setting Up
#===========

Setting up you credentials
git config --global user.name "Name"
git config --global user.email "your@email.com"

Setting up p4merge (perforce.com, install p4merge - visual merge tool only)
# Set as difftool (comparing)
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global difftool.prompt false
# Set as merge tool (graphical)
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global mergetool.prompt false

Open git's config file
git config --global -e
git config --global --list

How to avoid tracking certain files
Use .gitignore file

#===============
# Authentication
#===============
Can use either HTTPS or SSH with GitHub

# Creating an SSH Key
mkdir .ssh && cd .ssh
ssh-keygen -t rsa -C "your@email.com"
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
If prompted for a passphrase, enter one
NOTE: 
2 files get generated. id_rsa (secret key), id_rsa.pub (public key)
Copy the entire public key, up to your email & add it in your GitHub settings

# Log on to GitHub using SSH on the command line
ssh -T git@github.com
Will be prompted to enter passphrase
NOTE: You can now use the SSH link to clone repos

#==========
# Using Git
#==========

# Create repo locally
git init -> Must done inside your src directory.
Create new repo on GitHub. Let's call it NewRepo
git remote add origin https://github.com/username/newrepo.git
git push -u origin master -> First push to GitHub. -u enables tracking btw repos

# Check which remote repo is linked to your local one
git remote -v

# Changing the remote url
git remote set-url origin https://new_url

# Removing the .git folder.
# If u created it in a wrong folder
rm -rf .git

# Get exisiting code from GitHub
git clone https://github.com/...

# Check which files are being tracked
git ls-files

# Check for modifications
git status

# Check git logs
git log -> Returns the commit times, authors, & SHA values of your previous commits
git reflog -> Shows all the actions taken inside a repo
git show -> Returns the commits, plus the changes that were made. PRESS q to quit

# Undersanding git's 3 local states
1. Working directory -> Your working files
2. Staging area -> Used prepare for the next commit
3. Repository (.git folder) -> All commited changes
After commiting file, they are sent to the remote repo

# Add files to track
git add file_name -> adds specific file to staging area
git add . -> adds all files to the staging area

# Commit changes
git commit -m "message about what what was done"

# Add to staging area & commit in one line
git commit -am "commit message"

# How to unstage file
git reset HEAD file_name
git rm --cached file_name

# See all recent changes
git log

# Simplified view of git log
git log --oneline --graph --decorate --all

# Create git alias
# alias == hist, leave out preceding git when writing command
git config --global alias.hist "log --oneline --graph --decorate --all"

# Revert back changes to last commit
git checkout -- file_name

# Rename a file using git
git mv old_name.txt new_name.txt

# If rename & delete happened outside of git
git add -A

# Delete file using git 
git rm file_name.ext

# If deletion happed outside of git
git add -u

# See differences btw 2 commits
git diff [commit ID] [commit ID]/HEAD

#=============
# Tags
#=============
Lightweight Tags
git tag tag_name -> Places a tag on current commit with no additional info

Annotated Tags
git tag -a tag_name -m "commit message"

List Tags
git tag --list

# Delete a tag
git tag -d tag_name


#=============
# Branching
#=============

What is a branch?
It's a timeline of commits
Branch names are labels
Deletion removes label only

Types of Merges
---------------

Fast Forward Merge
- Happens when no additional work has been detected on the master branch.
- Git simply adds all commits from the feature branch on to the master
  as if we never branched off.

Automatic Merge
- Happens when git detects non-conflicting changes in the master branch.
- Git preserves both timelines
- A Merge Commit is created where the two branches meet

Manual Merge
- Happens when git is unable to resolve any conflicts
- An automatic merge is not possible
- Git enters the Conflict Merge State which means all conlficts must be
  resolved before trying to merge.
- Once conflicts are resolved, those changes are saved as a Manual Merge Commit.

NOTE: You have to switch back to master branch first, then merge

Special Markers
---------------
HEAD
- Points to the last commit of the current branch

# Check which branch you're in
git branch

# Create a new branch & switch to it
git checkout -b branch_name

# Switch to a different branch
git checkout branch_name

# Delete branch
git branch -d branch_name

# Create a Pull Request (PR)
Alerts a repo's owner that you want to make some changes.
Pull request is the same as Merge Request
STEPS:
1: Fork the owner's repo in you own account. Basically making a copy
2: Clone the forked repo locally to make changes
3: Make the changes
4: Add, commit, & push the changes up to GitHub
5: Send pull request to repo owner

# Pull from GitHub
git pull origin master

# Switch back to master branch
git checkout master

# Saving temporal changes using Stashing
git stash -> Creates saves the current changes & goes back to last commit
git stash list -> Lists out all stashes
git stash pop -> Applies changes on top stash & deletes it

Time travelling using reset
git reset [commit ID] flag -> Flags incl "soft", "hard", "mixed"
 soft -> Changes the commit ID that head point to
 hard -> Most destructive. Can delete your changes
 mixed-> The default type of reset