#-------------------
# GETTING STARTED
#-------------------

# Documentation URL
https://docs.aws.amazon.com/index.html

# Install AWS CLI
pip3 install awscli --upgrade --user

# Check version
aws --version

# Configuration (Access Key, Region, Output Format)
aws configure

# Command format
aws <service> <operation> <parameters>
e.g aws ec2 run-instances --instance-id i-11234

# CLI Output
JSON
Text
Table

# General command parameters
--query: Filter fields displayed in result ('Reservations[0].Instances[0])
--filter: Applies filtering server side ("Name=platform,Values=windows")
--dry-run: Checks if authorized without making a request

# CLI help (Different levels)
aws help
aws <service> help
aws <service> <operation> help

# Read/Edit profile(s)
nano ~/.aws/config

# Run cli command using different profile
aws s3 ls --profile profile_name

# Change default profile
export AWS_PROFILE=profile_name

# List profiles
aws configure list-profiles


#------------------------
# USE NON-DEFAULT PROFILE
#------------------------
aws <command> --profile profile_name


#--------
# LAMBDA
#--------
aws iam create-role --role-name de-lambda-ex --assume-role-policy-document file://trust-policy.json

aws iam attach-role-policy --role-name de-lambda-ex --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

aws lambda create-function --function-name de-logging-function \
--zip-file fileb://sad_lambda.zip --handler sad_lambda.lambda_handler --runtime python3.8 \
--role arn:aws:iam::<Your account ID>:role/de-lambda-ex

aws lambda invoke --function-name de-logging-function out --log-type Tail \
--query 'LogResult' --output text |  base64 -d 

aws lambda delete-function --function-name de-logging-function

aws lambda add-permission \
--function-name arn:aws:lambda:af-south-1:263134221295:function:alias_test:DevV1 \
--source-arn  https://5o9g1mjjx3.execute-api.af-south-1.amazonaws.com/dev/*/GET/hello \
--principal apigateway.amazonaws.com \
--statement-id apigateway-access \
--action lambda:InvokeFunction

#---------------
# DATA PIPELINE
#---------------

# create pipeline
aws datapipeline create-pipeline --name pipeline_name --unique-id token

# upload pipeline definition
aws datapipeline put-pipeline-definition \
--pipeline-id <your-pipeline-id> \
--pipeline-definition file://pipeline_definition.json

# list data pipelines
aws datapipeline list-pipelines

# activate pipeline
aws datapipeline activate-pipeline \
--pipeline-id <your-pipeline-id>

# verify pipeline
aws datapipeline list-pipelines

# verify the pipeline runs
aws datapipeline list-runs

# delete pipeline
aws datapipeline delete-pipeline \
--pipeline-id <pipeline_id>


#----
# S3 
#----

# list buckets
aws s3 ls

# search for specific bucket
aws s3 ls | grep bucket_name_substring

# create buckets
aws s3 mb s3://bucket_name

# create folder inside buckets
aws s3 s3api put-object \
--bucket bucket_name \
--key 'folder-name/'
--profile profile_name

# copy file into s3
aws s3 cp local/path/to/file.ext \
s3://bucket-name

# copy file into specific folders inside a s3 bucket
aws s3 cp local/path/to/file.ext \
s3://bucket-name/folder/

# copy folder & its contents into s3
aws s3 cp local/path/to/file.ext \
s3://bucket-name \
--recursive

# upload file to s3
aws s3api put-object \
--bucket bucket_name \
--key path/to/file.ext \
--body local/path/to/file.


# list files inside bucket
aws s3 ls s3://bucket-name

# delete file from s3
aws s3api delete-object \
--bucket bucket_name \
--key path/to/file.ext \
--profile profile_name

# delete s3 bucket (force remove contents)
aws s3 rb s3://bucket-name --force

#-----
# IAM
#-----

# create a new role
aws iam create-role \
--role-name role_name \
--assume-role-policy-document file://service_trust.json

# create a new IAM policy
aws aim create-policy \
--policy-name policy_name \
--policy-document file://policy_doc.json

# attach policy to role
aws iam attach-role-policy \
--role-name role_name \
--policy-arn policy_arn

# create instance profile
aws iam create-instance-profile \
--instance-profile-name profile_name

# connect role to instance profile
aws iam add-role-to-instance-profile \
--role-name role_name \
--instnace-profile-name profile_name


# ------------------------------------------------
# Bash script to get creds when MFA is enabled
#-------------------------------------------------

#!/bin/bash

# check if the MFA device ARN and token were passed as arguments
if [ -z "$1" ] || [ -z "$2" ]
then
    echo "Please provide the MFA device ARN and token as arguments"
    exit 1
fi

# retrieve temporary security credentials using the AWS STS get-session-token command
sts_output=$(aws sts get-session-token --serial-number $1 --token-code $2)

# extract the AccessKeyId, SecretAccessKey, and SessionToken from the command output
access_key=$(echo $sts_output | jq -r '.Credentials.AccessKeyId')
secret_key=$(echo $sts_output | jq -r '.Credentials.SecretAccessKey')
session_token=$(echo $sts_output | jq -r '.Credentials.SessionToken')

# Set the variables as environment variables
export AWS_ACCESS_KEY_ID=$access_key
export AWS_SECRET_ACCESS_KEY=$secret_key
export AWS_SESSION_TOKEN=$session_token

# use the temporary security credentials to list all the S3 buckets
aws s3 ls
