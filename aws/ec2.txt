#=========================
# Amazon Elastic Cloud Compute - EC2
#=========================

# AWS's virtual server


# Launching an instance
---------------------------
Management Console -> Servicecs -> EC2
Panel -> Instances -> Launch Instance

Step 1: Choose Amazon Machine Image (AMI)
    Choose between Community AMIs, AWS Marketplace AMIs, & My AMIs

Step 2: Choose Instance Type
    Determines the specs for your EC2 instance
    Instance Type families incl: General Purpose, Memory Optimise,
    Compute Optimise...
    CPU, RAM, Storage Type, Network Performance, IPv6 Support

Step 3: Configure Instance
    Choose number of Instances
    Request Spot Instances (Unchecked by default)
    Choose VPC
    Choose Subnet
    Auto-assign Public IP (leave default)
    Add Instance to Placement Group (unchecked by default)
    IAM Role. Added role with SSM access to use Sessions Manager
    Shutdown behavior (Stop by default)
    Termination Protection (unchecked by defualt)
    Monitoring (CloudWatch monitoring unchecked by default)
    Tenancy (Shared by default)
    User Data (Empty by default. Is ran by cloud-init)

Step 4: Add Storage
    Root volume supplied by default
    Can add more volumes
    Pick volume size (8GB defualt)
    Volume Type (General Purpose SSD - gp2 by default)
    Delete on termination (ticked)  
    Encryption (None by default)

Step 5: Add Tags
    Create tags is you have multiple Instances

Step 6: Configure Security Group
    Change default new Security Group name into one you like or choose existing
    Set inbound rules. Default first rule is for SSH
    Add rule for HTTP if you want you instance to be accessable from the internet
    Give serurity group description(s)

Step 7: Review
    Review & Launch instance
    Pick key-pair to use for SSHing into the instance



# Creating a Snapshot
-------------------------
Panel -> volumes
Right Click volume -> Create snapshot
Enter snapshot description -> Click 'Create Snapshot'


# Encrypting a Volume
-------------------------
Create a snapshot
Actions -> Copy Snapshot
Choose 'Destination Region'
Check 'Encrypt this snapshot'
Master Key -> (default) 


# Creating an Image from a snapshot
-----------------------------------------
Panel -> Snapshots
Actions -> Create Image
Give image name & other instance details
'Create'


# Create a Launch Configuration
-----------------------------------
Panel -> Launch Configuration
Do EC2 launch process


# Auto Scaling Group
-----------------------
NOTE: Need to create/have a Launch Configuration first
Panel -> Auto Scaling Group
Select Launch Configuration or Launch Template to use
Insert 'Group Name', 'Group Size', 'VPC', 'Subnet(s)'
Edit Details: Change target groups, Health Check Type (EC2/ELB)


# Add a Load Balancer
-------------------------
Panel -> Load Balancer
Choose Type (ALB, NLB, CLB)
If 'Application Load Balancer (ALB)'
Basic Config -> 'Name', 'Scheme', IP address type, Set listeners, Choose AZs @ leaset 3 Public
Configure Security Group
Configure Routing: Target Group -> TG Name, type, protocol, port, health checks
Register targets (Pick instances directly or choose an ASG)


# Attach Domain to Load Balancer
--------------------------------------
Panel -> Load Balancers
Add listener
Protocol: HTTPS:443
Forward to -> your-target-group
Default SSL Certificate -> Choose your certificate 
Save
Note: Ensure that your Security allows HTTPS traffic


# Mount EFS Volume to EC2
-------------------------------
Services -> EFS
Create file system
Choose security group(s) for mount points
Enable Lifecycle Management (optional)
Enable Encryption (optional)
Next (Reivew) -> Create File System
NOTE:   Your EC2 security group has to allow for NFS connections
        View 'Amazon EC2 mount instructions (from local VPC)


#=====
# CLI
#=====

# Launch an instance
aws ec2 run-instances \
--image-id ami-123456789 \
--instance-type t2.micro \
--key-name <key-pair-name> \

# EDSA AMI Instance
aws ec2 run-instances \
--image-id ami-0b23604f872b0abe6 \
--instance-type t2.micro \
--security-group-ids sg-072781961696615fb \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=muzi_testing}]' 'ResourceType=volume,Tags=[{Key=Name,Value=muzi_testing}]'


# Start an instance
aws ec2 start-instances --instance-ids <instance-id>

# Check status for start/restart operation
aws ec2 wait instance-running --instance-ids <instance-id>

# Stop an instance
aws ec2 stop-instances --instance-ids <INSTANCE-ID>

# Verify that the instance has stopped
aws ec2 wait instance-stopped --instance-id <INSTANCE-ID>

# Terminate an instance
aws ec2 terminate-instances --instance-ids <instance-id>

# Creating a key pair
aws ec2 create-key-pair --key-name <key-pair-name>

# Change instance type
aws ec2 modify-instance-attribute --instance-type <new-type>

aws ec2 modify-instance-attribute \
--instance-id <Instance ID> \
--instance-type "{\"Value\": \"t2.micro\"}"

# Create tag(s) for instance
aws ec2 create-tage --resources <instance-id> \
--tags "Key=<TagKey>, Value=<TagValue>"

# Get instance public dns name
aws ec2 describe-instances --instance-id <instance-id> --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName'

# Check instance current state or other attribute
aws ec2 describe-instances \
--instance-ids i-09f04e4d08f548eb9 \
--query "Reservations[*].Instances[*].[InstanceType,PublicDnsName,PublicIpAddress,State.Name]"

# Create an AMI
aws ec2 create-image \
--instance-id <current-instance-id> \
--name <AMI-name>

# Copy AMI to a different region
aws ec2 copy-image \
--source-image-id <ami-id> \
--source-region <region-code> \
--region <new-region-code> \
--name "AMI name"

# Find region hosting instance
curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep region

# Create EBS volume
aws ec2 create-volume --size 8 --availability-zone us-east-1a --volume-type gp2

# Get info about EBS volume
aws ec2 describe-volumes --volume-ids <volume-id>

# Attach EBS Volume to instance
aws ec2 attach-volume --volume-id <volume-id> \
--instance-id <instance-id> \
--device <device-path e.g. /dev/sdf>

# Create EBS Volume snapshot
aws ec2 create-snapshot --volume-id <volume-id> \
--description "This is the snapshot's description"

# Check status of volume snapshot
aws ec2 wait snapshot-completed --snapshot-id <SNAPSHOT-ID>

# View snapshot IDs from specific volume
aws ec2 describe-snapshots \
--filters "Name=volume-id,Values=<volume-id>" \
--query 'Snapshots[*].SnapshotId'

# Create volume from snapshot
aws ec2 create-volume --size # \
--availability-zone us-east-1a \
--volume-type gp2 \
--snapshot-id <snap-id>

# Create Role for Amazon Data Lifecycle Manager (DLM)
aws dlm create-default-role

# Activate DLM policy
aws dlm create-lifecycle-policy \
--description "My EBS volume(s) backup policy"
--state ENABLED \
--execution-role-arn <role-arn-returned-4rm-create-default-role> \
--policy-details file://<policyDetails.json>

# Find instances with specific attributes and tag(s)
aws ec2 describe-instances \
--filter "Name=tag:Project,Values=ERPSystem" \
--query 'Reservations[*].Instances[*].{ID:InstanceId,AZ:Placement.AvailabilityZone,Project:Tags[?Key==`Project`] | [0].Value}'

# View cloud-init logs
tail -50 /var/log/cloud-init-output.log