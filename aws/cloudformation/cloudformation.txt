# Create stack
aws cloudformation create-stack \
        --stack-name file.yml \
        --template-body file://path/to/template.yml \
        --parameters
        ParameterKey=<1st-param>, ParameterValue=<1st-param-value> \
        ParameterKey=<2nd-param>, ParameterValue=<2nd-param-value>

# Check stack status
watch -n 5 -d \
aws cloudformation describe-stacks \
--stack-name myStack \
--output table

# Check why a stack failed
aws cloudformation describe-stack-events \
--stack-name myStack \
--query "StackEvents[?ResourceStatus == 'CREATE_FAILED']"

# Delete the stack object, even if the rollback was complete.
aws cloudformation delete-stack --stack-name myStack

# Detect drift
aws cloudformation detect-stack-drift --stack-name myStack

# Check status of drift
aws cloudformation describe-stack-drift-detection-status \
--stack-drift-detection-id <drift-id>

# Describe resources that drifted
aws cloudformation describe-stack-drift-detection-status \
--stack-drift-detection-id <drift-id>

# Check stack resource status
aws cloudformation describe-stack-resources \
--stack-name myStack \
--query 'StackResources[*].[ResourceType,ResourceStatus,DriftInformation.StackResourceDriftStatus]' \
--output table

# Continue rolling back an update, even if rollback failed
aws cloudformation continue-update-rollback \
--stack-name MyExistingStack

#=============
# TEMPLATE SECTIONS
#====================

# Resources [REQUIRED]
-----------
- Which resource(s) need to be spun up?

ResourceName:
  Type: "AWS::EC2::Instance"
  Properties:
    ImageId: <ami_id>
    KeyName: <key_name>
    InstanceType: t2.micro
    SecurityGroupIds:
      - <security_group_id>
      - <security_group_id>

# Parameters
-------------
- Variables to be entered in by user at before stack creation.

StackVPC:
  Description: "VPC to be used for stack"
  Type: "AWS::EC2::VPC::Id"
InstanceTags:
  Type: String
  Description: "Name to be given to instance"

# Mappings
----------
- Hard coded key-value pairings 2b used for loggic instance template.

Mappings: 
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0ff8a91507f77f867"
    us-west-1: 
      "HVM64": "ami-0bdb828fd58c52235"

Resources: 
  myEC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: m1.small


# Outputs
---------
- Values to be used as template output(s)
- Put at the end of the template, if available

OutputName:
  Description: "Private IP of new instance"
  Value: !GetAtt
    - InstanceName
    - PrivateIp





#===========
# FUNCTIONS
#===========

!Ref
References another value within the template

!GetAtt
Returns the value of an attribute from a resource in the template
!GetAtt logicalNameOfResource.attributeName
!GetAtt: [ logicalNameOfResource, attributeName ]

!Join
Appends a set of values into a single value
!Join [ delimiter, [ 'This', 'will be', 'one sentence' ] ]

!Select
Returns a single object from a list of objects by index
!Select [ index, listOfObjects ]

!FindInMap
Returns the value corresponding to keys in a two-level map
!FindInMap [ MapName, TopLevelKey, SecondLevelKey ]

!Sub
Substitutes variables in an input string with values that you specify
!Sub
  - String
  - Var1Name: Var1Value
    Var2Name: Var2Value

!Base64
Returns the Base64 representation of the input string
!Base64 valueToEncode

Condition FUNCTIONS
!If, !And, !Equals, !Not, !Or


!GetAZs
Intrinsic function.
Returns a list of AZs for specified region in alphabetical order.
!GetAZs AWS::Region