#================
# Launch terminal
#================
crlt + alt + t


#===========
# YouTube-dl
#===========
youtube-dl --extract-audio --audio-format mp3
curl http://checkip.amazonaws.com
lspci
top -o cpu
top


#============
# Shutdown PC
#============
sudo shutdown -P +60
sudo shutdown -P 23:00
sudo shutdown -P now
sudo shutdown -c -> Cancel shutdown

#=====
# GPU
#=====
lspci -k | grep -EA3 'VGA|Display|3D'
xrandr --listproviders
xrandr --setprovideroffloadsink 0x3f 0x64
DRI_PRIME=1 spyder, steam, jupyter notebook
glxinfo | grep "OpenGL renderer"

#=====
# CMUS
#=====
:clear
:add ~/Music

#========
# Ranger
#========
ranger -> opens ranger
q -> quits Ranger
@ -> enter bash command without leaving ranger

# Check if a website is running
ping url -c 3 ??????????

#============
# Navigation
#============
clrt + k -> cuts from cursor till end of line
ctrl + u -> cuts from cursor to beginning of line
Shift + Insert -> pastes what's on the clipboard
ctrl + w -> delete one word at a time

#===================
# System Information
#===================
uname -a -> displays basic info
sudo lshw -> shows complete breakdown of hardware
lshw -short -> a summarised version of 'sudo lshw'
htop -> shows resource usage
lsb_release -a -> show info on current Linux distro

#============
# Directories
#============
mkdir folder_name -> creates folder called folder_name is working directory
mkdir -p folder_1/folder_2 -> creates a folder_2 inside folder_1

#===========
# Navigation
#===========
cd -> goes to home directory
cd ~ -> goes to home directory
cd .. -> moves up one directory
cd ../.. -> moves up two directories
cd / -> navigates to root directory
cd /tmp/file.txt -> uses absolute path to navigate
cd path/to/file.txt -> uses relative path to navigate

#===========
# Searching
#===========
find . -iname file.ext -> searches from current dir and its sub directories
find / -iname file.ext -> searches entire computer
find . -type -iname "*.txt" -> find files using file types
grep text file.txt -> searches for 'text' inside file.txt
grep -i text file.txt -> searches for 'text' inside file.txt. Ignore case
grep text * -> searches for 'text' inside all files in current directory
grep -r text * -> search for 'text' inside current directory & its subdirectories
grep -l text * -> lists the names of actual files that contain 'text'
cat /etc/passwd | grep root -> Searches for 'root' inside passwd file

#================
# Basic Commands
#================
ls -> list storage
ls -a -> show all
ls -l -> show long details
ls -lt -> sort by last modified
ls -ltr -> sort by last modified in reverse order
ls -lah -> show all in list view, human readable
ls -R -F -> displays all directories and files under the current directory
ll -> same as ls -alF
lsblk - list attached block devices
pwd - print working directory
cd -> goes to user's home folder
cd ~ -> goes to user's home folder
cd / -> goes to root folder
cd - -> goes to previous directory user was in
pushd -> jump directories and go to specific one
popd  -> jump back to last directory
file file_name -> returns file extension
locate file_name -> locate files on system
sudo -> do something as superuser
sudo !! -> run previous commands as sudo
sudo updatedb -> updates the locate database
which -> used to fine toerh commands install on your system
up arrow -> show history of commands. Last In First Out (LIFO)
history -> shows history of commands you typed
ctrl + r -> reverse research, alternative to using history
man command_name -> returns the manual for a specific command_name
apropos keyword -> shows command related to keyword
id -> returns info about your system
watch -> runs a command periodically
kill app_name -> force quit
printenv -> shows environment settings
cal -> show calendar
screenfetch -> returns system info
!n -> runs previous command from history
grep -> selects lines according to what they contain, eith exact or pattern
sort -> sorts results in ascending order
uniq -> returns unique values that are adjacent or consecutive to each other
set -> displays environment variables
echo $ENVIRON_VAR -> returns the value of ENVIRON_VAR
\ -> Backslash to start typing command in new line
explorer . -> Open current directory in file explorer (Windows)
&& -> Chains commands. Only runs the second/next command if the first one worked.
ctrl + a -> Moves cursor to start of command
ctrl + b -> Moves cursor to end of command
sudo !! -> Run previous command using sudo
ctrl + k -> Cut from cursor position to end of line
ctrl + u -> Cut from cursor position to begging of the line
ctrl + y -> Paste text
ctrl + w -> Delete word(s) one at a time

#=============
# Installing Packages
#=============
sudo apt update -> Updates packages registry
sudo apt install <package_name> -> Installs package
sudo apt remove <package_name> -> Uninstalls package

#============
# Directories
#============
mkdir folder_name -> creates folder called folder_name is working directory
mkdir -p folder_1/folder_2 -> creates a folder_2 inside folder_1
mkdir /dir_name-> creates creates dir_name inside root directory
mkdir dir_name -> creates dir_name inside current directory
mkdir -p dir1/dir2/dir3 -> creates all 2 directories inside dir1 & also ensures dir1 gets created if not exist
pwd -> print working directory
rm -r dir_name/ -> deletes everything inside dir_name & dir_name
cp -r dir1 dir2 -> copies dir1 into dir2

#=================
# SH Files
#====================
./file.sh -> runs executable file
sudo sh ./file.sh -> runs file as an executable
bash file.sh -> runs executable file

#========
# Files
#========

# CREATE
touch file_name.txt -> creates new file
touch file1 file2 file3 -> creates 3 files
touch *.txt -> changes all date modified to now
cat >filename.ext -> creates a new file, enter contents in prompt & ^d to save 
echo "Write/Overwrite to file" > file.ext


# READ
cat file_name -> reads file and returns contents inside the terminal
nano file_name -> opens file_name inside the nano
vim file_name -> opens file_name inside the vim
head file.txt -> outputs first 10 lines of document
head -n 5 file.txt -> returns the first 5 lines of file.txt
tail file.txt -> displays last part of file
more file_name -> page up or down a file
less file_name -> navigate inside a file (up/down arrows or pdup/pgdown)
file file_name -> returns file type
cat fil1 file2 file3 > ./merged_file.txt -> cat can also be used to concatinate files
wc -c/-w/-l file_name -> word, character, line count
ls -U | head -4 -> look at the first 4 files
cut -f 2-5, 8-d, file.csv -> view select columns in file, use ',' as delimeter
ls -1 | wc -l -> Number of files in current directory
cmp file1 file2 -> compares files on a byte-by-byte basis
colordiff file1 file2 -> Returns differences btw 2 files. color coded
grep -i texttosearchfor file.ext -> Case insensitive grep search
grep -l texttosearchfor file.ext -> List names of files with matches in them
grep -c texttosearchfor file.ext -> Count the number of matches

# UPDATE
mv/cp dir/file1.txt dir/file2.txt backup -> move or copy files to dir call backup
mv/cp dir/dir2/file.txt . -> move/copy files to current directory
mv old-name new-name -> Rename directory (deletes old dir)
cp old_name new_name -> Copies directory (keeps old dir)
cp -R ~/path/from/home/* . -> Copies all files inside a folder into current folder
sudo chmod -R <permissions> path/to/dir -> Change permissions for all files inside a specific directory (HANDLE WITH CARE)
echo "String to appended on line" >> file.ext
chmod +x file.ext -> changes file to executable

# DELETE
rm file_name -> delete file
rm -r /path/to/directory/* -> Delete all files & subdirectories inside a directory.
rm *.txt -> Remove all files with specific file extension
rm -rf dir_name/ -> Permanently deletes a folder with its files
rmdir dir_name -> Deletes an empty folder


#======================
# Working with Aliases
#======================
alias -> List all aliases
unalias alias_name -> removes alias
alias alias_name="command to call"

#============
# Zip Folders
#============
# sudo apt-get install zip
# zip -r zip_dir_name.zip . (creates a zip folder containing all files in current dir. REMEMBER the period)
# zip -g path/to.zip_dir_name.zip path/to/new_file.txt -> adds new file into zip folder. -g/--grow appends to existing zip directory

# Unzip Folders
sudo apt-get install Unzip
unzip name.zip (unzipping a zip file)

# Extract using Tar
tar xvzf dir_name.tar.gz

#==================
# Check Disk Space
#==================
sudo du -sh /path/to/dir/* -> returns space used by subdirectories & files
du -h -> returns file sizes
df -h -> check free space
ls -1 | wc -l -> Number of files in current directory


#=================================
# Copy File between Local & Cloud
#=================================

# copy local file/folder to cloud
scp file_name.txt somethin@123.23.123.123
scp -r /path/to/dir_name user@123.123.123.123:/home/my_files/dir_name

# copy file from remote host to local
scp user@123.123.123:/home/username/file_name.txt 
scp -r user@123.123.123.123:/home/my_files/dir_name /home/local_files/dir_name

# copy specific file types between two remote instances
scp user@123.123.133:/home/username/folder/"*.csv" /path/to/current/instance/folder

# copy files from current Remote directory to local
scp -r username@hostname:/path/from/file .

man scp

#====================
# Synchronising Files
#====================
rsync -r --progress ~/path/to/dir user@server.com:/path/to/dir



#==========
# Processes
#==========
pkill program -> kill all processes of certain program
htop -> view system resource usage (cores, memory, etc)


#========
# OpenVPN
#========
sudo openvpn --config file_name


#===================================
# Open IDLE using Conda Environment
#===================================
conda activate/activate myenv (if not activated already)
python -m idlelib -> activates IDLE shell


#===========
# Networking
#===========
nslookup domainname.com -> Returns IP address associated with domain name. A record
dig domainname.com -> Same as nslookup but with more info

#===============
# Miscellaneous
#===============
source ~/.profile -> Reload system environment
whoami -> check which user you're logged in as
which package -> finds the location of an executable
whereis package -> returns location, source location, man page files for package
sudo -> used to grant user admin permissions outside of their user folder
sudo -i -> switches from user to root (how's it diff from 'sudo su'????)
groups <username> -> returns groups a user is in
crontab -e -> opens file used to manage cronjobs
neofetch -> show system specs
ncdu -> shows how much space is being taken by files & folders
cmatrix -> displays a matrix effect. cool for backgrounds.
wget url -> downloads files from the web
tee -> reads from std output & writes to std output & file(s)
systemctl status cron.service -> checks if cron service is active
xrandr -s -> shows you possible screen resolutions
ufw status -> check firewall status
sudo passwd user_name -> opens prompt to change user password
su -l user_name -> Switch to a different user
ctrl + t -> transpose/switch 2 characters in command
cat /etc/os-release -> Check linux type & version

#=======================
# Creating Bash Scripts
#=======================
1. Create .sh file containing commands
2. File line of file should be shebang (#!/bin/bash)
3. Save file
4. Make file executable (chmod +x file.sh)
5. Execute file (./file.sh)


#=================
# File permissions
#=================
4 = read (r)
2 = write (w)
1 = execute (x)

user | group | other

777 - full rights to everyone
400 - only user has read rights
764 - user has full rights, group can only read & write, others can only read

drwxr-xr-x -> It's a directory. User has full rights, group can read & execute, others can only execute
-rw-r--r-- -> It's a file. User can read & write, group & others can only read


#====================
# Chaining Commands
#====================

a && b -> Execute command b only if command a was successful (AND)
a || b -> Execute command b only if command a failed (OR)
a | b -> Pipe connects the output of command a as the input of command b

# use \ to write multi line commands
command 1 \
  | command 2 \
  | command 3

# redirect output 
a > b -> Output from a is written into b. overwrites anything found inside b
a >> b -> Output from a is appended into b
a > /tmp/sample 2> /tmp/sample_error -> output from redirect contains both  the output and any errors

#===========
# Exit Codes
#===========
0 - Ran successfully
1 - Catchall error code
127 - Command not found
128 - Invalid argument to exit
130 - Script ended by crtl+C
255* - Exit status out of range

#===============
# Power Commands
#===============
sudo poweroff -> shuts down system
sudo shutdown -P now -> shuts down system right now
sudo reboot -> reboots system
sudo shutdown -r now -> reboots system right now
sudo shutdown -r 10 -> reboots after 10 minutes

===============
Find Open Ports
===============
# find open ports on localhost
namp localhost

========
cronjobs
========
echo "* * * * *  command-that-will-run-every-minute >> /tmp/cronlog" > cronjob



================
System Processes
================

# List running processes
systemctl list-units

# List all running services
systemctl list-units | grep .service

# Check status of a service
sudo systemctl status <service_name>

# Start a service
sudo systemctl start <service_name>

# Check services that failed to start at startup
 systemctl --failed

# Check logs that ran at startup
journalctl -b

# Check logs for a specific service
journalctl -u <service_name>

# Enable/Disable a service
sudo systemctl enable/disable <service_name>

# Watch logs as they're being created
sudo journalctl -u logTime -f

# Reload deamon after modyfing service file
sudo systemctl deamon-reload

# Check log between two times
journalctl --since "2020-12-25 23:15:00" --until "2020-12-31 23:59:59"


============
hardware
============

# list block devices
lsblk

# list info about cpu
lscpu

# View free memory/ram
free -h

# list mounted file systems
df -m

# list network interfaces
ip a

# view kernel version
uname -r

# special dev folders
/dev/null -> Discards anything you throw at it
/dev/random -> Produces random output
/dev/stdin -> standard input of a process
/dev/stdout -> standard output of a process
/dev/stderr -> standard output of errors from processes
/dev/zero -> returns a file of just zeros


# creating a 512 bytes dummy file of zeros
dd if=/dev/zero of=/tmp/zero count=1

# shredding the contents of a device
shred /dev/sda

# find mounted drives
mount | /dev/sd

# Managing partitions
sudo fdisk /dev/sda
  d - delete
  w - write
  n - new

# format a partition
sudo mkfs -t ext4 /dev/sda3

# mount a partition
sudo mkdir /mnt/drive1
sudo mount /dev/sda3 /mnt/drive1


# create a system link or shortcut to directory
sudo chown $USER:$USER /path/to/directory -> make yourself the owner of the dir
ls -s /path/to/directory ~/ -> create shortcut in root directory

====================
bashrc modifications
====================

# function to create and cd into new directory
mkcd() { mkdir -p "$1" && cd "$1"; }


# function to adjust terminal volume
volume() { amixer sset 'Master' $1%; +}

==================
Bash Config Files
==================
.bashrc - Contains bash configs. Runs every time a new terminal is launched.
.bashrc_profile - Similar to .bashrc but runs once when a user first logs in.
.bash_logout - Runs every time a user logs out.

# Aliases
alias ll='ls -alF'
alias dr='python manage.py runserver'
alias python='python3'

# Functions
mkcd() { mkdir -p "$1" && cd "$1"; }


# Start command in new lines
1: from home directory, open bashrc using nano:
        $ nano ~/.bashrc
2: Look for where the PS1 variable is mentioned
3: Replace the '\$' at the end of the expression with '\n\$'
4: Save file and restart terminal

# Import other dot file(s) into .bashrc
source ~/.bash_aliases



============
.inputrc
============
# Change shortcuts from default emacs to vim config
set editing-mode vi
set keymap vi

# Turn off terminal sound
set bell-style none

# Make autocomplete to case insensitive
set completion-ignore-case On

# Tab once for all possible completions
set show-all-if-unmodified On

# Show all endings
set show-all-if-ambiguous On

# Colour code terminal results
set colored-stats On


================
Set External Editor for Bash
======================
export EDITOR=nano

# open external editor to edit command
^x ^e