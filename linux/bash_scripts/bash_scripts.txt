#=======================
# Creating Bash Scripts
#=======================
1. Create .sh file containing commands
2. File line of file should be shebang (#!/bin/bash)
3. Save file
4. Make file executable (chmod +x file.sh)
5. Execute file (./file.sh)

#======================
# Variable Names
#=====================
# Naming similar to python constants
e.g VAR_NAME, VARIABLE2,

# Accessing variables
$VAR_NAME
${VAR_NAME}
"$VAR_NAME"
'$VAR_NAME' => $VAR_NAME

${ARRAY_NAME[0]}

# Assigning variables (NO SPACES)
Name="Muzi"
FAV_COLOUR[0]="Blue"
FAV_COLOUR[1]="Red"


# Special variables
$0 - script's name
$n - 
$# - argument count
$* - $1 $2 if two args were entered
$@ - $1 $2 if two args were double qouted individually
$? - exit status of last run command (0=successful, 1=unsuccessful)
$$ - proccess id of current shell
$! - proccess id of last background command

#########
# BASICS
#########

# Arithmetic Operators
e.g x=3, y=10
'expr $x + $y' returns 13
'expr $x - $y' returns -7
'expr $x \* $y' returns 30
'expr $y / $x' returns 3
'expr $y % $x' returns 1
'expr a = $x' assigns 3 to a
[ $y == $x ] returns false
[ $y != $x ] returns true

# Relational Operators
Num1 -eq Num2 -> true, if Num1 == Num2
N1 -ne N2 -> true, if N1 != N2
n1 -ge n2 -> true, if n1 >= n2
n1 -gt n2 -> true, if  n1 > n2

# Boolean Operators
! - Negation i.e !false is true
-o - OR
-a - AND

# String Operators
e.g x="def", y="hij"
[ $x = $y ] is false
[ $x != $y ] is true
[ -z $k ] true, len of string is zero
[ -z $x ] true, len of string is non-zero



# Arithmetic expressions should have ((double quotes)) -> ((1 + 2)) or ((3 < 5))

# Expanding a list 
echo {1..5} -> 1 2 3 4 5
touch /tmp/file{1..3} -> creates 3 files

########################################################
# Takes name & surname as positional args & returns them
#!/bin/bash
echo Name: $1
echo Surname: $2

#########################################################

#######################################################
# Executes an if-statement. fi - indicates end of if-statement
# -e -> true, if exists
# -d -> true, if exists & is directory
# -f -> true, if exists & is file
# -s -> true, if exists & size > 0
# -x -> true, if exists & is executable

#!/bin/bash
if [ -e /etc/passwd ]; then
  echo passwd exists
else
  touch /etc/passwd
fi

########################################################

########################################################
# String comparisons
#!/bin/bash

$1='Something'
$2='Nothing'

if [ -n $1 ]; then
  echo "String has a length > 1"
fi

if [ -z $1 ]; then
  echo "String has a length == 0"
fi

if [ $1 == $2 ]; then
  echo 'Something equals to nothing'
else
  echo 'Something does not equals to nothing'
fi


########################################################

########################################################
# Script install an Apache server & creates a simple webpage
# To be used with AWS Linux 2 AMI
#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd.service
systemctl enable httpd.service
echo "Hello World from $(hostname -f)" > /var/www/html/index.html

########################################################
# CASE STATEMENT

case EXPRESSION in

  PATTERN_1)
    STATEMENTS
    ;;

  PATTERN_2)
    STATEMENTS
    ;;

  PATTERN_N)
    STATEMENTS
    ;;

  *)
    STATEMENTS
    ;;
esac


# WHILE-LOOP

i=0
while [$SECONDS -lt 3 ]; do
  i=$((i+1))
done
echo $i

########################################################
# SINGLE VS DOUBLE QOUTATION MARKS

# inside scripts
'single' quotes for bash to read characters literally & returns everthing as is
"double" qoutes are for string interpolation

# creating files
touch hello world -> creates 2 files
touch "hello world" -> creates a single file

##################
# SCRIPT SETTINGS
##################
set -e (exit script if any command fails)
set -x (print commands that are being executed)
set +x (disables printing commands that are being executed)