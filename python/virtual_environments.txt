# Using venv (part of standard library)
python -m venv env_name (env_name normally .venv)
source env_name/bin/activate (activate using linux/mac)
source env_name/Scripts/activate (windows on gitbash)
env/Scripts/activate.bat (activate using Windows Command Prompt)
pip3 freeze > requirements.txt (creates a requirements file)
pip3 install -r requirements.txt (installs what's inside requirements.txt)
deactivate (deactivate's env)
rm -rf env_name (deletes virtual env)

# Using virtualenv
pip install virtualenv (if not installed)
virtualenv env_name (create env)
source env_name/bin/activate (linux/mac)
deactivate (deactivate's venv)
pip -V (check if you're inside the virtual environment)
rm -r path/to/env_name (remove virtual env)

# Using Conda
conda create -n env_name python=3.8 (create with specific python version)
conda create env_name --file requirements.txt
conda activate env_name
conda list (shows u what's installed in env)
conda list --export > requirements.txt
conda deactivate
conda env list (list all envs)

# Using Pipenv
pip install pipenv (installing)
pipenv shell (create & activate venv. Also creates Pipfile)
exit (quits env)
pipenv lock -r (lists all packages in env)
pipenv uninstall package_name (uninstall's a package from venv)
pipenv install package_name --dev (install a dev package)
pipenv lock -r > requirements.txt -> creates a Pipfile.lock & requirements.txt file
pipenv install -r ./requirements.txt (install everything in requirements file)
pipenv check (check packages for security issues)
pipenv graph (shows dependencies & child dependencies)
pipenv install --ignore-pipfile (installs packages using Pipfile.lock)
pipenv install --python=path/to/python4.3 (creates env using specific python version)
pipenv uninstall <package_name> -> uninstalls a specific package
pipenv --rm (remove env)
pipenv check

# Install package in current folder
pip install package_name -t .