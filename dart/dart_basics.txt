//==========
// Intro
//==========

Created by Google.
Object oriented. Everything is an object in Dart :)
C styled - Similar to C, Java, JS, Swift
Statistically typed 
    - Data types known at runtime.
    - Once a variable has been assigned a type, it has to stay that way.
Can run on mobile and web.
Compiled to machine code.
Can compile to JavaScript using dart2js compliler
zero indexed. Counts from zero
file extension = .dart

//========
// Basics
//========

void main(){
    //Everything inside here will run
    String name = 'Muzi'; //Semicolon to terminate lines
    print("hello, i'm $name) // $ to reference variables
    func_name(var_type arg1, var_type arg2)
}

// Single line comment

/*
Multi-line
comment
*/

/// Docstring
void someFunction(){}

//===========================
// Variables
//===========================

var_type var_name = value;
String name = 'Muzi';
int age = 31;
double height = 1.75;
var any_var = value; // dart will figure out the type at runtime
final constant_var = value; //final is used for constants. Read only vars
dynamic var_name = value; //allows a var type to change
null = no value
value++; // increaments values by 1
only mention the type of variable at creation.

-----------------------------------------------------------
// Calling variables
varName
$varName, if inside strings. Also ${varName.method}

------------------------------------------------------------
// Data types
String, int, double, bool
const   -> Once set, cannot be changed. 
        -> Assigned a compile time e.g. const String passWord = "super1234";
final   -> Similar to const but assigned at runtime
const > final > var
dynamic -> Can change types

// Create empty variables
List<int> listOfInts = [];
String emptyString = '';
Map<String, dynamic> newMap = {};
Set<String> setOfStrings = {};

//=========
// Casting
//=========
var one = int.parse('1'); // int from String
var myInt = int.tryParse('2222'); // returns null if parsing fails
var myDouble = double.parse('2.0'); double from String
var myDouble = double.tryParse('22.0'); // returns null if parsing fails

String oneAsString = 1.toString(); // String from int

//========
// String
//========
character sequences
"double" or 'single' quotes
print("My name is ${name.length} letters long");

//===========================
// Booleans - bool
//===========================
true
false

//===========================
// Operands
//===========================

Comparison
Arithmetic
Logical
Assingment
Bitwise
Identity
Membership

//-----Comparison Operators-------
assingment operator, = 
equals to, ==
not equals to, !=
greater than, >
smaller that, <
greater than or equal to, >=
smaller than or equal to, <=

//---Arithmetic Operators----------
Basic Arithmetic, -+/*
Divide and return interger, ~/
Get remainder(modulo), %
Increament by 1, ++
Decrement by 1, --

//----Logical Operators------------
And -> &&
OR -> ||
NOT -> !

//------Assignment Operator---------
single equal sign, =
assign is variable is null, ??=
add to and return new value of variable, +=
subtract on and return new values of variable, -=

//----Bitwise Operators--------
Bitwise AND, a & b
Bitwise OR, a | b
Bitwise NOT, ~a

//-----Identity Operators-----
is
is!

//-----Membership Operator------
// Use contains method
myList.contains(x)


//===========================
// Functions
//===========================
void func_name(String name, int age, double height){
    ///tripple slash for doc strings
    //void states function doesn't return anything. void is not required
}

String func_name(String name, int age, [double height=2.22]){
    //String states function returns a string
    // optional/default params inside []
    return "Hello, my name is $name, I'm $age yrs old and $heightm tall"
}

String func_with_named_vars({String name, int age, double height=2.22}){
    // {} is for named params. similar to kwargs in python
    // [] not allowed when you have {}
    // call_func_with_named_vars(name: 'value', age: #, height: #); 
    return "Hello, my name is $name, I'm $age yrs old and $heightm tall";
}

// Use arrow operator for one line funcs. think lambda
String say_name(String) => "Hi, my name is $name";
List<int> list_func() => [1,2,3]; // func will only return a list of integers

// Named functions == Normal functions
void funcName () {...}

// Anonymous Functions
() P{...}

// Tenary Operater
condition ? ifTrue : ifFalse;

// Using Generics
// a & b can be any data type
void add<Type>(Type a, Type b){
    print(a + b)
}

//===========================
// Collections
//===========================

//--------Lists-------------
var myList = [1,2,3];
List<int> numList = [1,2,3]; //creating a list of ints
myList.add(88); // add==append in python
myList.addAll([4,5,6]); //addAll is similar to extend in python
var emptyList = List(); // [] can take any data types
var emptyNumList = List<int>(); // can only take in integers
myList.indexOf('element'); // returns index value
myList.insert(2, 'value'); // 'value' will be inserted at index 2

// concatinate lists using the spread syntax
List<int> a = [1,2,3];
List<String> b = ['a','b','c'];
List c = [...a,9,...b];
print(c); // [1,2,3,9,'a','b','c'];

//--------Maps/Dicts--------------
var person = {'name':'Muz', 'age':36, 'height':1.78};
print(person['name']);
var new_map = Map<String, dynamic>();


//===========================
// Control Flow
//===========================

//--------If/Else--------------

if (conidition) {
    //do this
} esle if (another_condition) {
    //do the this thing
} else {
    // when all else fails
}

// if/else using a ternary operator.
// condition ? exprT : exprF
final type = (value % 2 == 0) ? 'even' : 'odd';
 
//--------While Loops--------------

int sum(List<int> values) {
    int i = 0;
    int result = 0;
    while (i < values.length) {
        result += values[i];
        i++;
    }
    return result;
}

//--------For Loops--------------

int sum(List<int> values) {
    int result = 0;
    // for in loop
    for (int value in values) {
        result += values;
    }
    return result;
}

// C-style for loop
for(int i=0; i<7; i++) {
    //Do something to i, 7 - 0 times
}

// also possible write one line Closures for for-loops.
// Closure is a function without a name.

//--------Switch Statements--------

enum NetworkError {
    badUrl,
    timeout,
    resourceNotAvailable,
}

void printError(NetworkError error) {
    switch (error) {
        case NetworkError.badUrl:
            print('bad url');
            break;
        case NetworkError.timeout:
            print('timeout');
            break;
        case NetworkError.resourceNotAvailable:
            print('resource Not Available');
            break;
    }
}

//===========================
// Imports
//===========================

//------Import Core Library------
import 'dart:math';

//-----Import library from external package-------
import 'package:test/test.dart';

//--------Import files-----------
import 'path/to/file_name.dart';

//------Import specific module from package----
import 'package:http/http.dart' show get;




//===========================
// Classes
//===========================

//------Creating Classes-----------------

class PascalNaming {

}

class Person {

    // Static variables. Shared by all instances
    static int population = 0;

    // Class attributes or properties
    final String name; // final == immutable
    int age;
    double _height; // _private_attribute. Can only be accessed from inside the class

    // Constructor name == ClassName. this==self in python
    // @required means parameter has to be there when class is instantiated.
    // @required not allowed for parameters with default values
    Person({@required this.name, this.age, this.height}){
        population++; //increase population everytime a person is created
    };

    // class methods

    String describe(){
        return "Hello, I'm $name, I'm $age yrs old and $height meters tall";
    }

    Sring say_name() => "My name is $name"

    // getters don't need the () as they don't take any parameters
    get height => _height;

    // setter method
    void set setAge(int age) {
    age = currentYear - yearOfBirth;
  }

    @override
    String toString() => "name: $name"; //overides parent class method

    @override
    String describe(){
        super.describe();
        print("This extends the parent's class method");
    }

    toString() {
        return "This a  Dart's equivalent to python's __str__/__unicode__";
    }
}

/// Class with named parameters
class Dog {
    final String name;
    final String type;
    final int age;

    Dog({this.name, this.type, this.age});
}
// creating an instance using named parameters
Dog snoopy = Dog(name: 'Snoopy', type: 'PitBull', age: 3);

/// Generic class
class Person<t> {
}

/// Class with a named Constructor
class ImageModel {
    int id;
    String url;
    ImageModel(this.id, this.url);
    ImageModel.fromJson(parsedJson) {
        id = parsedJson['id'];
        url = parsedJson['url'];
    }
}

//------------Inheritance-------------------------

// All objects inherit from Object
class Employee extends Person{
    Employee({String name, int age, double height, this.taxCode, this.salary})
        : super(name:name, age:age, height:height);
    final String taxCode;
    final int salary;
}

//-------------Mixins---------------------

// Mixins use the 'with' statement
class ProfilePage with LoginRequired {
    // LoginPage with a loginRequired mixin
}

//------------Abstract Classes---------------------

abstract class Shape {
    double area();
}

//Implementing an interface means your new class has to at minimum have all the attributes & methods of the class it implements
class Square implements Shape {
    Square({this.side});
    final double side;
    double area() => side * side;
}

import 'dart:math';

class Circle implements Shape {
    Circle({this.radius});
    final double radius; //stored property
    double area() => radius * radius * pi; //import pi from math module
}

// creating an interface from an abrstract class
void printArea(Shape shape) {
    print(shape.area());
}
voide printArea2(Shape shape) {
    double get area; //computed property. getter
}
void printArea2(Shape shape) {
    print(shape.area);
}

//------Create instances of class-------------------------

final person = Person(name:'Muzi', age:31, height:1.75);

print(employee.name); // accessing attributes
print(employee.say_name()); // accessing class methods
print(employee.toString()); // class string method

final square = square(side:5.0);
print(square.area());
printArea(square); //using abstract class interface
